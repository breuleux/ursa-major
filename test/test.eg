
require-macros:
   earl-mocha ->
      describe, it, before, after
      xdescribe, xit
      assert, asserts
      expect-error
   ..src ->
      struct

require:
   ..src -> INFO


describe "type checking":
   before:
      struct @Person:
         String? name
         Number? age

   it "accepts correct types":
      p = @Person{name = "Bob", age = 41}
      assert p.name === "Bob"
      assert p.age === 41

   it "rejects incorrect types":
      expect-error Error:
         p = @Person{name = "Bob", age = "41"}


describe "projectors":
   before:
      struct @Person:
         String! name
         Number! age

   it "cast to correct type if possible":
      p = @Person{name = "Bob", age = "41"}
      assert p.name === "Bob"
      assert p.age === 41


describe "structs inside structs":
   before:
      struct @A:
         value
      struct @B:
         value
      struct @C:
         @A? a
         @B? b

   it "work":
      a = @A{value = 10}
      b = @B{value = 20}
      c = @C{= a, = b}
      assert c.a === a
      assert c.b === b
      assert c.a.value === 10
      assert c.b.value === 20

   it "can project":
      @A! a = {value = 10}
      @B! b = {value = 20}
      @C! c = {= a, = b}
      assert c.a === a
      assert c.b === b
      assert c.a.value === 10
      assert c.b.value === 20

   it "error when not provided":
      expect-error E.struct:
         c = @C{}

   it "error when wrong type":
      expect-error E.struct:
         c = @C{a = @B{value = 10}, b = @A{value = 20}}


describe "recursive references":
   before:
      struct @Person:
         String? name
         Number? age
         maybe @Person? mother
         maybe @Person? father

   it "work":
      alice = @Person{name = "Alice", age = 45}
      bob = @Person{name = "Bob", age = 51}
      carmen = @Person{name = "Carmen", age = 20, mother = alice, father = bob}


describe "methods":
   before:
      struct @Pair:
         a, b
         sum{} = @a + @b
         product{} = @a * @b

   it "can be called":
      p = @Pair{a = 10, b = 20}
      assert p.sum{} == 30
      assert p.product{} == 200


describe "validate":
   before:
      struct @Pair:
         a, b
         validate{} =
            if @a + @b != 10:
               throw E.invalid{"The sum must be 10."} 

   it "at construction":
      p = @Pair{a = 4, b = 6}
      expect-error E.invalid:
         @Pair{a = 4, b = 7}

   it "when setting fields":
      p = @Pair{a = 4, b = 6}
      expect-error E.invalid:
         p.a = 1

   it "can update fields all at once":
      p = @Pair{a = 4, b = 6}
      p.update{a = 1, b = 9}
      assert p.a == 1
      assert p.b == 9


describe "struct inheritance":

   it "inherit properties and methods":
      struct @Animal:
         String? name
         name-twice{} = '{@name}{@name}'
      struct @Dog < @Animal:
         cry{} = '{@name} woofs!'
      fido = @Dog{name = "Fido"}
      assert fido.cry{} === "Fido woofs!"
      assert fido.name-twice.{} === "FidoFido"

   it "override properties and methods":
      struct @Animal:
         String? name
         String? species
         cry{} = "cry"
      struct @Dog < @Animal:
         species = .Dog
         cry{} = "woof!"
      fido = @Dog{name = "Fido"}
      assert fido.species === "Dog"
      assert fido.cry{} === "woof!"

   it "enforce all validation":
      struct @Animal:
         String? name
         validate{} =
            if @name.starts-with{"X"}:
               throw E.unthinkable.X{"No animal has a name that starts with X"}
      struct @Dog < @Animal:
         validate{} =
            if @name.starts-with{"Z"}:
               throw E.unthinkable.Z{"No animal has a name that starts with Z"}
      expect-error E.unthinkable.X:
         @Dog{name = "Xylophone"}
      expect-error E.unthinkable.Z:
         @Dog{name = "Zebra"}


class TwiceNamer:
   name-twice{} = '{@name}{@name}'

describe "mixins":

   it "simple object":
      m = {method name-twice{} = '{@name}{@name}'}
      struct @Person < m:
         String? name
      assert @Person{name = "Bob"}.name-twice{} === "BobBob"

   it "multiple objects":
      m1 = {method name-twice{} = '{@name}{@name}'}
      m2 = {method name-thrice{} = '{@name}{@name}{@name}'}
      struct @Person < {m1, m2}:
         String? name
      assert @Person{name = "Bob"}.name-twice{} === "BobBob"
      assert @Person{name = "Bob"}.name-thrice{} === "BobBobBob"

   it "normal class":
      struct @Person < TwiceNamer:
         String? name
      assert @Person{name = "Bob"}.name-twice{} === "BobBob"


require:
   kaiser -> [serialize, deserialize]

round{x} = deserialize{serialize{x}}

describe "serialization":

   before:
      struct @Person:
         type-id: "PERSONNN"
         String? name
         Number? age

   it "works":
      p1 = @Person{name = "alice", age = 22}
      p2 = round{p1}
      assert p1 !== p2
      assert p1 == p2

   it "does not accept invalid serializations":
      ser = JSON.stringify with {
         type-id = "PERSONNN"
         data = {
            name = {type-id = "native", data = "alice"}
            age = {type-id = "native", data = "22"}
         }
      }
      expect-error E.struct:
         deserialize{ser}

   it "no deserialization from unsafe":
      person = @Person._unsafe with {name = 123, age = "Rachid"}
      expect-error E.struct:
         round{person}


describe "type descriptions":
   before:
      struct @Person:
         String? name
         Number? age
         maybe @Person? mother
         maybe @Person? father
      @P = @Person.prototype

   it "simple types":
      assert @P[INFO].fields.name.type{} == #check{String, #assign{.name}}
      assert @P[INFO].fields.age.type{} == #check{Number, #assign{.age}}

   it "maybe":
      assert @P[INFO].fields.mother.type{} ==
         #any{#check{@Person, #assign{.mother}}
              #check{null, #assign{.mother}}}
      assert @P[INFO].fields.father.type{} ==
         #any{#check{@Person, #assign{.father}}
              #check{null, #assign{.father}}}

